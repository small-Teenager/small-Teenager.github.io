[{"title":"【Java】开发过程中的内存溢出及解决办法","url":"/2018/12/15/【Java】开发过程中的内存溢出及解决办法/","content":"\n\n> 摘要： 本文主要是对开发过程中存在的内存溢出问题及解决办法。\n\n1.引起内存溢出的原因有很多种，常见如下：\n----------------\n1. 内存中加载的数据量过于庞大，如一次从库取出多数据;\n2. 集合类中有对对象的引用，使完后未清空，使得JVM 不能回收;\n3. 代码中存在死循环或循环产生过多重复的对象实体; \n4. 使用的 第三方软件中的BUG;\n5. 启动参数内存值设定的过小;\n\n2.内存溢出的解决方案： \n----------------\n\n第一步，修改 JVM 启动参数，直接增加内存。（-Xms,Xmx参数不要忘记加）\n\n第二步，检查错误日志，查看‘outOfMemory’错误前是否有其它异常或错误。\n\n第三步，对代码进行走查和分析，找出可能发生内存溢出的位置。\n\n\n1. 检查对数据库询中，是否有一次获得全部的数据。一般来说如果一次取十万条记录到内存就可能引起内存溢出。这个问题比较隐蔽，在上线前，数据库中数据较少，不容易出现问题，上线后，数据库中数据增多，一次查询可能引起内存溢出。因此对于数据库查询尽可能采用分页的方式查询。\n2. 检查代码中是否有死循环或递归调用。\n3. 检查是否有大循环重复产生新对象实体。\n4. 检查List、Map 等集合对象是否有使用完后未清除的问题。List、Map 等集合对象会始终存有对对象的引用，使得这些对象不能被GC 回收。\n\n第四步，使用内存查看工具动态查看内存使用情况。\n\n```\n\n\n\n\n\n","tags":["Java"]}]